namespace PortPolicies {
	policy access_internal_parking {
		target
			clause Attributes.actionId == "https://w3id.org/sxacml/access-control-action#Open" 
				and SxacmlAttributes.resourceClassId == "https://w3id.org/sxacml/sample-port/port#BarrierController":anyURI
		apply permitUnlessDeny
		
		rule {
			deny
			condition not (anyURIIsIn("https://w3id.org/sxacml/sample-port/port#ObservedUser":anyURI, SxacmlAttributes.subjectClassId))
		} 
		
		
		rule {
			deny
			condition not (anyURIIsIn("https://w3id.org/sxacml/sample-port/port-mapping#DriverAuthorizedForTruck":anyURI, SxacmlAttributes.subjectClassId))			
		}				
		
		rule {
			deny
			condition not (
				dateTimeFromString(stringOneAndOnly(Sxacml.sparqlPathSelect("?subject port:drivesTruck/port:hasPlannedDelivery/logiserv:hasTime/time:hasBeginning/time:inXsdTime"))) 
					>= dateTimeSubtractDayTimeDuration(dateTimeOneAndOnly(Attributes.currentDateTime), "PT1H":dayTimeDuration)
				&& dateTimeFromString(stringOneAndOnly(Sxacml.sparqlPathSelect("?subject port:drivesTruck/port:hasPlannedDelivery/logiserv:hasTime/time:hasEnd/time:inXsdTime"))) 
					< dateTimeAddDayTimeDuration(dateTimeOneAndOnly(Attributes.currentDateTime), "PT1H":dayTimeDuration))
			
		}
		
		
		rule {
			deny
			condition not (
				stringBagSize(Sxacml.sparqlPathSelect("?resource port:isHostedByResource")) > 0 
				&&				
				stringBagSize(Sxacml.sparqlPathSelect("?environment sosa:hasObservation/sosa:madeBySensor/port:isHostedByResource")) > 0
				&&
				allOf(
					function [stringEqual],
					stringOneAndOnly(Sxacml.sparqlPathSelect("?resource port:isHostedByResource")),
					Sxacml.sparqlPathSelect("?environment sosa:hasObservation/sosa:madeBySensor/port:isHostedByResource")
					)
				)
		}
	}
}
